// esmr bluedog_Nimbus_Instrument_ESMR bd_microwaveSpec 5
// smmr bluedog_Nimbus_Instrument_SMMR bd_microwaveSpec 7
// sams bluedog_Nimbus_Instrument_SAMS bd_weather 7
// thir bluedog_Nimbus_Instrument_THIR bd_IRradiometer 1 3 5 7
// sis bluedog_Nimbus_Instrument_SIS bd_IRspec 3RTG 5 7
// erb bluedog_Nimbus_Instrument_ERB bd_weather 5 7
// toms bluedog_Nimbus_Instrument_TOMS bd_weather 5 7
// torus bluedog_Camera_InstrumentTorus bd_weather 1 3 5 7

CONTRACT_TYPE:NEEDS[Bluedog_DB]
{
	name = SecondGenWeather
	title = Second Generation Weather Satellite  // This is the NIMBUS program
	group = ScienceSatellites

	description = <b>NOAA Second Generation Weather Satellites</b><br><br>Our experience has given us a better understanding of the best orbits to use for weather satellites. Please launch a new weather satellite into the proper orbit that is sun synchronous. Remember that Sun Synchronous orbits are slightly retrograde.<br><br><b><color=yellow>NOTE: The satellite will be destroyed upon completion of the contract. This simulates transfer of the payload back to the customer.</color></b><br><br>
	synopsis = Launch a new second generation weather satellite into the proper orbit

	completedMessage = Success! The meteorologists on Earth are thrilled with the results.

	
	cancellable = true
	declinable = true
	autoAccept = false
	minExpiry = 5
	maxExpiry = 15
	maxCompletions = 1
	maxSimultaneous = 1
	deadline = 180

	targetBody = HomeWorld()
	
	// ************ REWARDS ************
	prestige = Trivial  // Significant //Exceptional
	advanceFunds = @rewardReputation * @SpacelinesContracts:KerbucksTrivial
	rewardFunds = @advanceFunds * @SpacelinesContracts:KerbucksRewardTrivial
	failureFunds = @advanceFunds * 1.1
	rewardScience = 5
	rewardReputation = 50 * @rewardFactor
	failureReputation = 0 // was @rewardReputation

	// ************ REQUIREMENTS ************

	// ************ REQUIREMENTS ************

	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = EarlyWeatherSatellite
		minCount = 1
		title = Complete 'Early Weather Satellite' contract at least @minCount times
	}
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = FirstSunSyncSat
	}

	DATA
	{
		type = int
		index = $SecondGenWeatherSatellites_Count + 0
	}

	BEHAVIOUR
	{
		name = IncrementTheCount
		type = Expression

		CONTRACT_OFFERED
		{
			RepeatSat_Completion = ($RepeatSat_Completion + 0) == 0 ? (UniversalTime() - @SpacelinesContracts:expectedDays_SecondGenWeatherSat * 86400) : ($RepeatSat_Completion + 0)
		}
		CONTRACT_COMPLETED_SUCCESS
		{
			SecondGenWeatherSatellites_Count = $SecondGenWeatherSatellites_Count + 1
			RepeatSat_Completion = UniversalTime()
		}
	}

	DATA
	{
		type = int
		antiGrindCompletion = $RepeatSat_Completion == 0 ? (UniversalTime() - @SpacelinesContracts:expectedDays_SecondGenWeatherSat * 86400) : $RepeatSat_Completion
	}

	DATA
	{
		type = float
		elapsedDays = Round((UniversalTime() - @antiGrindCompletion) / 86400.0)
		rewardFactor = Log(Max(@elapsedDays / @SpacelinesContracts:expectedDays_SecondGenWeatherSat * 20 - 9, 1), 2) / 3.46
		rewardFactorPercent = Round(@rewardFactor * 100, 1)
	}

	// Hardcoded list of specific experiments
    DATA
    {
        name = experimentslist
		title = experimentslist
		type = List<ScienceExperiment>
        hidden = true

        experiments = [bd_microwaveSpec, bd_weather, bd_IRradiometer, bd_IRspec, bd_weather ]
    }

	// Randomly select 4 valid experiments
    DATA
    {
		type = List<ScienceSubject>
        hidden = true

        scienceSubjectsTemp1 = AllScienceSubjectsByBodyExperiment([@targetBody], @experiments)
		scienceSubjectsTemp2 = @scienceSubjectsTemp1.Where(s => !s.Biome().IsKSC())
		scienceSubjectsTemp3 = @scienceSubjectsTemp2.Where(s => s.Situation() == InSpaceLow)
        scienceSubjects = @scienceSubjectsTemp3.Random(2)
    }

	// ************ PARAMETERS ************

	PARAMETER
	{
		name = SecondGenWeather
		type = VesselParameterGroup
		define = SecondGenWeatherSatellite
		dissassociateVesselsOnContractCompletion = true
		title = Second Generation Weather Satellite

		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a New Vessel
			hideChildren = true
		}
		PARAMETER
		{
			name = Crewmembers
			type = HasCrew
			minCrew = 0
			maxCrew = 0
			title = Uncrewed
			hideChildren = true
		}
		PARAMETER
        {
            name = RequiredParts
            type = Any
          
            title = You'll need a Nimbus satellite core

            PARAMETER
            {
                type = PartValidation
                part = bluedog_Nimbus_EarlyControlCore
            }
			PARAMETER
            {
                type = PartValidation
                part = bluedog_Nimbus_LateControlCore
            }
        }
		PARAMETER
		{
			name = ReachSpecificOrbit
			type = ReachSpecificOrbit
			displayNotes = true
			index = 0
			deviationWindow = 0.5

			PARAMETER
			{
				name = Duration
				type = Duration

				duration = 2m

				preWaitText = Check for Stable Orbit
				waitingText = Checking for Stable Orbit
				completionText = Stable Orbit: Confirmed
			}
		}
	}

	BEHAVIOUR
	{
		name = TransferVessel
		type = DestroyVessel
		onState = CONTRACT_SUCCESS
		vessel = SecondGenWeatherSatellite
	}

	BEHAVIOUR
	{
		name = VesselDestroyed
		type = DialogBox
		DIALOG_BOX
		{
			title = Vessel Ownership Transferred
			condition = CONTRACT_SUCCESS
			position = CENTER
			width = 0.5
			TEXT
			{
				text = The contract has been completed successfully and the satellite has been transferred back to the customer.
			}
		}
	}

	BEHAVIOUR
	{
		name = OrbitGenerator
		type = OrbitGenerator

		FIXED_ORBIT
		{
			ORBIT
			{
				SMA = 1735000
				ECC = 0.01
				INC = 97
				LPE = 0
				LAN = Random(0,360)
				MNA = 0.0145
				EPH = 0
				REF = 1
			}
		}
	}
}