CONTRACT_TYPE
{
	name = lateSoundingRocket
	title = Altitude Sounding Rocket
	genericTitle = Altitude Sounding Rocket
	group = SuborbRocketResearch
	
	description = <b>Program: Suborbital Research<br><br>Design, build, and launch a sounding rocket to @/soundingTargetAltitude meters.
	genericDescription = Launch a sounding rocket to a specified altitude.
	synopsis = Reach an altitude of @soundingTargetAltitude meters.
	completedMessage = Congratulations! You've reached the target altitude!

	sortKey = 101

	cancellable = true
	declinable = false
	autoAccept = false
	minExpiry = 7
	maxExpiry = 7
	maxCompletions = 1
	maxSimultaneous = 1
	deadline = 0

	targetBody = HomeWorld()

	// ------------------------------------------------------------------------
	// Rewards
	// ------------------------------------------------------------------------
	prestige = Trivial  // Significant //Exceptional
	advanceFunds = 0
	rewardFunds = @rewardReputation * @SpacelinesContracts:KerbucksReputationRewardMultiplier
	failureFunds = @rewardFunds
	rewardScience = 1
	rewardReputation = 4
	failureReputation = @rewardReputation

	// ------------------------------------------------------------------------
	// Requirements
	// ------------------------------------------------------------------------
	DATA
	{
		type = List<float>

		soundingAltitudes = [100000,150000,200000,250000,300000]
	}

	// Break this into two steps to work around ContractConfigurator#260
	DATA
	{
		type = float

		soundingAltitudeIndex = soundingAltitudeIndex
	}

	DATA
	{
		type = float

		soundingTargetAltitude = @soundingAltitudes.ElementAt(@soundingAltitudeIndex)
	}

	REQUIREMENT
	{
		type = Expression
		title = Altitude

		expression = @/soundingAltitudeIndex < @/soundingAltitudes.Count()
	}

    REQUIREMENT
    {
        name = CompleteContract
        type = CompleteContract
        contractType = KarmanLine
        minCount = 1
        cooldownDuration = 0d
    }

	// Deactivate contract once a vessel reaches orbit
	REQUIREMENT
	{
		name = Orbit
		type = Orbit

		invertRequirement = true
		targetBody = HomeWorld()
	}

	BEHAVIOUR
	{
		name = IncrementIndex
		type = Expression

		CONTRACT_COMPLETED_SUCCESS
		{
			soundingAltitudeIndex = soundingAltitudeIndex + 1
		}
	}

	// ------------------------------------------------------------------------
	// Parameters
	// ------------------------------------------------------------------------
	PARAMETER
	{
		name = VesselGroup
		type = VesselParameterGroup
		title = Reach an altitude of @/soundingTargetAltitude meters

		PARAMETER 
		{
			name = NewVessel
			type = NewVessel
			hidden = true
		}

		PARAMETER 
		{
			name = HasCrew
			type = HasCrew 
			minCrew = 0
			maxCrew = 0
			title = Uncrewed
		}
		PARAMETER
		{
			name = ReachState
			type = ReachState

			minAltitude  = @/soundingTargetAltitude
		}
	}
}