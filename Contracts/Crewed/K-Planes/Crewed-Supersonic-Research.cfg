CONTRACT_TYPE
{
	name = CrewedSupersonicResearch
	group = EarlySpacePlanes

	title = K-Planes: Reach Mach @machNumber.
	genericTitle = K-Planes: Crewed Supersonic Research
	description = <b>K-Planes: Crewed Supersonic Research</b><br>Design, build, and fly a crewed aircraft able to maintain @crewedTargetSpeed m/s in level flight, then return home to the KSC runway safely.
	genericDescription = We want you to test an aircraft in supersonic flight
	synopsis = Reach a speed @crewedTargetSpeed m/s with a crewed vessel.
	completedMessage = Congratulations on a successful flight!

	autoAccept = false
	cancellable = true
	declinable = false
	
	targetBody = HomeWorld()

	// Can only have one active
	maxSimultaneous = 1

	// ************ REWARDS ************
	prestige = Significant  // Exceptional
	advanceFunds = @rewardReputation * @SpacelinesContracts:KerbucksSignificant
	rewardFunds = @advanceFunds * @SpacelinesContracts:KerbucksRewardSignificant
	failureFunds = @advanceFunds * 1.1
	rewardScience = 0
    rewardReputation = 10
	failureReputation = @rewardReputation * 0.5
	// ************ REQUIREMENTS ************

	DATA
	{
		type = List<float>
		speeds = [@SpacelinesContracts:Mach1, @SpacelinesContracts:Mach2, @SpacelinesContracts:Mach3, @SpacelinesContracts:Mach4, @SpacelinesContracts:Mach5]
	}

	// Break this into two steps to work around ContractConfigurator#260
	DATA
	{
		type = float
		speedIndex = speedIndex
	}

	DATA
	{
		type = float
		crewedTargetSpeed = @speeds.ElementAt(@speedIndex)
	}

    DATA
    {
        type = float
        machNumber = @speedIndex + 1
    }

	REQUIREMENT
	{
		type = Expression
		title = speed

		expression = @/speedIndex < @/speeds.Count()
	}

	REQUIREMENT
    {
        name = TechResearched
		type = TechResearched

        tech = aerodynamics1
    }

	BEHAVIOUR
	{
		name = IncrementIndex
		type = Expression

		CONTRACT_COMPLETED_SUCCESS
		{
			speedIndex = speedIndex + 1
		}
	}

    DATA
	{
		type = string
		craft = KPlanesSupersonic
	}

    // Vessel
    PARAMETER
	{
		name = VesselParameterGroup
		type = VesselParameterGroup
		title = Your aircraft must:

		define = @/craft
		dissassociateVesselsOnContractCompletion = true

		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			title = have a certified pilot

			trait = Pilot
			minCrew = 1

			disableOnStateChange = false
			hideChildren = true
		}

		PARAMETER
		{
			name = PartValidation
			type = PartValidation
			title = have wings

			category = Aero

			disableOnStateChange = false
			hideChildren = true
		}

		PARAMETER
		{
			name = All
			type = All
			title = have air breathing and/or liquid fuel rocket engines.

			PARAMETER
			{
				name = PartValidation
				type = PartValidation
				title = not have any solid rocket engines

				NONE
				{
					MODULE
					{
						EngineType = SolidBooster
					}
				}

				disableOnStateChange = false
				hideChildren = true
			}
			disableOnStateChange = false
		}
		disableOnStateChange = false
	}

    // Record
    PARAMETER
	{
		name = All
		type = All
		title = achieve a maximum airspeed of @/crewedTargetSpeed m/s
	
		PARAMETER
		{
			name = VesselParameterGroup
			type = VesselParameterGroup
			title = fly faster than @/crewedTargetSpeed m/s
	
			vessel = @/craft
	
			PARAMETER
			{
				name = ReachState
				type = ReachState
	
				targetBody = HomeWorld()
				situation = FLYING
				minSpeed = @/crewedTargetSpeed
	
				disableOnStateChange = false
				hideChildren = true
				hidden = true
			}
	
			completeInSequence = false
			disableOnStateChange = false
			hideChildren = true
		}
	
		PARAMETER
		{
			name = VesselParameterGroup
			type = VesselParameterGroup
			title = with less than 10 m/s of vertical speed
	
			vessel = @/craft
	
			PARAMETER
			{
				name = ReachState
				type = ReachState
	
				targetBody = HomeWorld()
				situation = FLYING
				minRateOfClimb = -20
				maxRateOfClimb = 20
	
				disableOnStateChange = false
				hideChildren = true
				hidden = true
			}
	
			completeInSequence = true
			disableOnStateChange = false
			hideChildren = true
		}
	
		PARAMETER
		{
			name = Duration
			type = Duration
	
			duration = 5s
			preWaitText = and hold for:
			waitingText = and hold for: 
			completionText = You did it!
	
			completeInSequence = true
			disableOnStateChange = false
		}
		completeInSequence = true
		disableOnStateChange = true
	}

    // Recovery
    PARAMETER
	{
		name = Any
		type = Any
		title = and then land and stop

		PARAMETER
		{
			name = Any
			type = Any
			title = at one of the following recovery areas

			PARAMETER
			{
				name = VesselParameterGroup
				type = VesselParameterGroup
				title = A Runway

				vessel = @/craft

				PARAMETER
				{
					name = ReachState
					type = ReachState

					targetBody = HomeWorld()
					biome = Runway
					situation = LANDED
					maxSpeed = 0.0

					disableOnStateChange = false
					hideChildren = true
				}

				disableOnStateChange = false
				hideChildren = true		
			}

            PARAMETER
			{
				name = VesselParameterGroup
				type = VesselParameterGroup
				title = Arid lowlands

				vessel = @/craft

				PARAMETER
				{
					name = ReachState
					type = ReachState

					targetBody = HomeWorld()
					biome = AridLowlands
					situation = LANDED
					maxSpeed = 0.0

					disableOnStateChange = false
					hideChildren = true
				}

				disableOnStateChange = false
				hideChildren = true		
			}
			disableOnStateChange = false
		}
		completeInSequence = true
		disableOnStateChange = false
	}

	// Checking crew safety
	PARAMETER
	{
		name = All
		type = All
		title = safely

		PARAMETER
		{
			name = VesselNotDestroyed
			type = VesselNotDestroyed
			title = without destroying your aircraft
			vessel = @/craft
		}

		PARAMETER
		{
			name = KerbalDeaths
			type = KerbalDeaths
			title = or killing anyone
			vessel = @/craft
		}
		completeInSequence = true
		disableOnStateChange = true
	}
}