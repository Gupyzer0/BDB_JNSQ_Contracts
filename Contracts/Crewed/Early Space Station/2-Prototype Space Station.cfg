CONTRACT_TYPE
{
	name = prototype_spaceStation_launch
	title = Prototype Space Station
	group = SpaceStations
	agent = Stations

	description = <b>Program: Early Space Stations</b><br><br>After successfully launching your first Space Station, it is now time to launch another. Launch a Space Station with @/crewRequired crew, and have them stay on board to accumulate the next required duration of Long Term Habitation experimentation.&br;&br;<b>Number of Phases Completed: @/index / @/maxCompletions</b>

	genericDescription = Design, build, and launch a new space station with the specified crew into Earth orbit for the listed duration. 

	synopsis = Launch a space station with the specified requirements

	completedMessage = Congratulations! This prototype space station has met its requirements!

	cancellable = true
	declinable = false
	autoAccept = false
	minExpiry = 0
	maxExpiry = 0
	maxCompletions = 4
	maxSimultaneous = 1
	deadline = 0

	targetBody = HomeWorld()

	// ------------------------------------------------------------------------
	// Rewards
	// ------------------------------------------------------------------------	
	prestige = Significant //Exceptional
	advanceFunds = @rewardReputation * @SpacelinesContracts:KerbucksSignificant
	rewardFunds = @advanceFunds * @SpacelinesContracts:KerbucksRewardSignificant
	failureFunds = @advanceFunds * 1.1
	rewardScience = 0
	rewardReputation = 250
	failureReputation = @rewardReputation * 0.5 // was @rewardReputation

	// ------------------------------------------------------------------------
	// Requirements
	// ------------------------------------------------------------------------
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = first_spaceStation
	}
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = secondGen_spaceStation
		invertRequirement = true
	}
	DATA
	{
		type = float
		protoCrewedIndex = protoCrewedIndex
	}
	DATA
	{
		type = List<Duration>
		protoStationCrewedDurations = [ 15d, 15d, 30d, 60d ]
	}
	DATA
	{
		type = Duration
		title = Duration
		protoStationCrewedTargetDuration = @protoStationCrewedDurations.ElementAt(@protoCrewedIndex)
	}
	BEHAVIOUR
	{
		name = IncrementIndex
		type = Expression

		CONTRACT_COMPLETED_SUCCESS
		{
			protoCrewedIndex = protoCrewedIndex + 1
		}
	}

	// ------------------------------------------------------------------------
	// Parameters
	// ------------------------------------------------------------------------		
	PARAMETER
	{
		name = vesselGroupLaunch
		type = VesselParameterGroup
		title = Launch a Space Station with the required parameters
		define = prototypeSpaceStation
		disableOnStateChange = true
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a new Station
			hideChildren = true
		}
		PARAMETER
		{
			name = HasCapacity
			type = HasCrewCapacity
			minCapacity = 2
			title = Space for at least 2 crew
			hideChildren = true
			disableOnStateChange = false
		}
		PARAMETER
		{
			name = ScienceModuleValidation
			type = Any
			optional = true
			completeInSequence = true
			
			PARAMETER
			{
				name = ScienceLab
				type = PartValidation
				title = Include a Mobile Processing Lab MPL-LG-2
				rewardFunds = 75000.0
				hideChildren = true
				
				partModule = ModuleScienceLab
			}
			PARAMETER:NEEDS[StationScience]
			{
				name = PartValidation
				type = PartValidation
				title = Include a TH-NKR Research Lab
				rewardFunds = 85000.0
				hideChildren = true
				
				part = StnSciLab
			}	
			PARAMETER:NEEDS[Kerbalism]
			{
				name = PartValidation
				type = PartValidation
				title = Include a Science Laboratory
				rewardFunds = 75000.0
				hideChildren = true

				partModule = Laboratory
			}
		}
		PARAMETER
		{
			name = Orbit
			type = Orbit
			minPeA = 100000
			maxApA = 250000
			targetBody = HomeWorld()
			title = Reach orbit with a perigee greater than 100 km and an apogee less than 250 km
			hideChildren = true
		}
	}

	PARAMETER
	{
		name = stayOnStation
		type = VesselParameterGroup
		title = Keep at least 2 crew aboard the station and conduct multi-week habitation analysis.
		vessel = prototypeSpaceStation
		notes = You can work on other contracts while your crew are working. You are safe to return to Mission Control
		completeInSequence = true
		disableOnStateChange = true
		
		PARAMETER
		{
			name = HasCrew
			type  = HasCrew
			minCrew = 2
			title = Has at least 2 crew members on the station.
			hideChildren = true
		}
		PARAMETER
		{
			name = Orbit
			type = Orbit
			minPeA = 125000
			maxApA = 250000
			targetBody = HomeWorld()
			disableOnStateChange = false
			title = Remain in a stable orbit
		}
		PARAMETER
		{
			name = Duration
			type = Duration
			duration =  @/protoStationCrewedTargetDuration
			preWaitText = Transfer to the station in the specified orbit.
			waitingText = Orbiting... Do not conduct EVA's during this time.
			completionText = Stay completed, you may return home now.
			completeInSequence = true
		}
	}
}