CONTRACT_TYPE
{
	name = supplySecondGenerationStation
	title = Second Generation Station Supply
	group = SpaceStations
	agent = Stations

	description = <b>Program: Early Space Station</b><br><br>Studying even longer durations of human spaceflight will necessitate rotating in fresh crew and replenishing supplies. Control a second generation space station, then send any needed crew and supplies so that it can continue its mission for the specified duration&br;&br;<b>Number of Phases Completed: @/secondGenResuppyIndex / @/maxCompletions</b>

	genericDescription = Rendezvous with a space station with the specified requirements in Earth orbit for crew rotation or resupply needs. 

	synopsis = Send supplies and crew to a station

	completedMessage = Congratulations! The station has been freshened up!

	sortKey = 1503

	cancellable = true
	declinable = false
	autoAccept = false
	minExpiry = 0
	maxExpiry = 0
	maxCompletions = 4
	maxSimultaneous = 1
	deadline = 0

	targetBody = HomeWorld()

	// ------------------------------------------------------------------------
	// Rewards
	// ------------------------------------------------------------------------	
	prestige = Trivial //Exceptional
	advanceFunds = @rewardReputation * @SpacelinesContracts:KerbucksTrivial
	rewardFunds = @advanceFunds * @SpacelinesContracts:KerbucksRewardTrivial
	failureFunds = @advanceFunds * 1.1
	rewardScience = 0
	rewardReputation = 200
	failureReputation = @rewardReputation * 0.5 // was @rewardReputation

	// ------------------------------------------------------------------------
	// Requirements
	// ------------------------------------------------------------------------
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = secondGen_spaceStation
	}

    DATA
	{
		type = float
		protoCrewedIndex = secondGenResuppyIndex
	}
    DATA
	{
		type = List<Duration>
		secondGenCrewedDurations = [ 60d, 90d, 90d, 180d ]
	}
	DATA
	{
		type = Duration
		title = Duration
		secondGenCrewedTargetDuration = @secondGenCrewedDurations.ElementAt(@protoCrewedIndex)
	}
    BEHAVIOUR
	{
		name = IncrementIndex
		type = Expression

		CONTRACT_COMPLETED_SUCCESS
		{
			secondGenResuppyIndex = secondGenResuppyIndex + 1
		}
	}

	// ------------------------------------------------------------------------
	// Parameters
	// ------------------------------------------------------------------------		
	PARAMETER
	{
		name = vesselGroupLaunch
		type = VesselParameterGroup
		title = Control a Space Station with the required parameters
		notes = The station must include at least 1 Docking Port and support for at least 3 Crew
		define = secondGenerationSpaceStation
		disableOnStateChange = true
		
		PARAMETER
		{
			name = HasCapacity
			type = HasCrewCapacity
			minCapacity = 3
			title = Space for at least 3 crew
			hideChildren = true
			disableOnStateChange = false
		}
		PARAMETER
		{
			name = DockingPort
			type = PartValidation
			partModule = ModuleDockingNode
			minCount = 1
			title = Have at least 1 docking port
			hideChildren = true
		}
		PARAMETER
		{
			name = Orbit
			type = Orbit
			minPeA = 150000
			maxApA = 250000
			targetBody = HomeWorld()
			title = Reach orbit with a perigee greater than 150 km and an apogee less than 250 km
			hideChildren = true
		}
	}

	PARAMETER
	{
		name = vesselGroupService
		type = VesselParameterGroup
		title = Send any needed supplies, modules, and crew to the station
		define = serviceVessel
		completeInSequence = true
		resetChildrenWhenVesselDestroyed = true
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a Supply Mission
			hideChildren = true
			disableOnStateChange = true
		}
		PARAMETER
		{
			name = DockingPort
			type = PartValidation
			partModule = ModuleDockingNode
			minCount = 1
			title = Have at least 1 docking port
			hideChildren = true
		}
		PARAMETER
		{
			name = Rendezvous
			type = Rendezvous
			vessel = secondGenerationSpaceStation
			distance = 100
			title = Rendezvous with the station.
		}
		PARAMETER
		{
			name = Docking
			type = Docking
			vessel = secondGenerationSpaceStation
			completeInSequence = true
			title = Dock with the station.
		}
	}

	PARAMETER
	{
		name = vesselGroupStationPersist
		type = VesselParameterGroup
		title = Keep the station in orbit
		vessel = secondGenerationSpaceStation
		completeInSequence = true
		
		PARAMETER
		{
			name = Orbit
			type = Orbit
			minPeA = 150000
			maxApA = 250000
			targetBody = HomeWorld()
			title = Keep the station in a stable orbit with a perigee greater than 150 km and an apogee less than 250 km
		}
	}

    PARAMETER
	{
		name = stayOnStation
		type = VesselParameterGroup
		title = Keep at least 2 crew aboard the station and conduct multi-month habitation analysis.
		vessel = prototypeSpaceStation
		notes = You can work on other contracts while your crew are working. You are safe to return to Mission Control
		completeInSequence = true
		disableOnStateChange = true
		
		PARAMETER
		{
			name = HasCrew
			type  = HasCrew
			minCrew = 2
			title = Has at least 2 crew members on the station.
			hideChildren = true
		}
		PARAMETER
		{
			name = Orbit
			type = Orbit
			minPeA = 125000
			maxApA = 250000
			targetBody = HomeWorld()
			disableOnStateChange = false
			title = Remain in a stable orbit
		}
		PARAMETER
		{
			name = Duration
			type = Duration
			duration =  @/secondGenCrewedTargetDuration
			preWaitText = Transfer to the station in the specified orbit.
			waitingText = Orbiting... Remember to keep at least 2 kerbals inside the station.
			completionText = Stay completed, you may return home now.
			completeInSequence = true
		}
	}
}