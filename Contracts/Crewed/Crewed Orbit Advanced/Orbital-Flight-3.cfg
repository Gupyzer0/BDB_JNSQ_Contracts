CONTRACT_TYPE
{
	name = OrbitalFlight3
	title = Orbital Flight with at Least Three Crew
	group = CrewedOrbitAdv

	description = <b>Program: Advanced Crewed Orbit</b><br><br>The goal and realization of putting three (or more) crew on orbit at the same time begins the era of the space taxi and ready access to LEO. Depending on the politics and economy of the originating nation, these craft will either be noted predecessors to later craft or become so ubiquitous and reliable in the role that they are still flying 50 years after their first. These craft should be able to support at least three crew and prove that they can stay in orbit for @/DurationText days. The Soviet Voskhod 1 (1964, 5.3 tons, modified Molniya) and Soyuz (1967, 6.5 tons, Soyuz), and the U.S. Apollo CSM (1968, 14.7 - 21 tons for LEO, Saturn 1B) are examples of these craft.&br;&br;<b>Number of Contracts Completed: @index / unlimited</b>
	genericDescription = Launch a spacecraft with at least three people onboard into orbit for a routine mission for the required number of days and return safely home.
	
	synopsis = Fly a three-person LEO Orbital mission.
	
	completedMessage = Crew alive and well after the mission--congratulations!

	cancellable = true
	declinable = true
	autoAccept = false
	minExpiry = 15
	maxExpiry = 90
	maxCompletions = 0
	maxSimultaneous = 1
	deadline = 180

	targetBody = HomeWorld()

	// ------------------------------------------------------------------------
	// Rewards
	// ------------------------------------------------------------------------
	prestige = Significant //Exceptional
	advanceFunds = @rewardReputation * @SpacelinesContracts:KerbucksSignificant
	rewardFunds = @advanceFunds * @SpacelinesContracts:KerbucksRewardSignificant
	failureFunds = @advanceFunds * 1.1
	rewardScience = 0
	rewardReputation = 250
	failureReputation = @rewardReputation * 0.5 // was @rewardReputation

	// ------------------------------------------------------------------------
	// Requirements
	// ------------------------------------------------------------------------
	REQUIREMENT
    {
        name = CompleteContract
        type = CompleteContract
        contractType = OrbitalFlight2
    }

	REQUIREMENT
	{
		name = All
		type = All
		title = Don't have any other Orbital Flight Contract Active.

		REQUIREMENT
		{
			name = AcceptContract
			type = AcceptContract
			
			contractType = OrbitalFlight1
			invertRequirement = true
		}
		REQUIREMENT
		{
			name = AcceptContract
			type = AcceptContract
			
			contractType = OrbitalFlight2
			invertRequirement = true
		}
	}
	
	DATA
	{
		type = Duration
		title = Duration
		Duration = 10d
		title = Duration
	}
	DATA
	{
		type = int
		DurationText = double(@Duration) / 86400
		title = Duration
	}
	DATA
	{
		type = int
		startPeA = 200000 + Round(Random(0, 100000), 25000)
		title = Perigee
	}
	DATA
	{
		type = int
		startApA = 300000 + Round(Random(0, 200000), 25000)
		title = Apogee
	}
	DATA
	{
		type = double
		Eccentricity = 0.0034
		title = Eccentricity
	}
	
	DATA
	{
		type = int
		index = $OrbitalFlight3_Count + 0
	}

	BEHAVIOUR
	{
		name = IncrementTheCount
		type = Expression
		
		CONTRACT_COMPLETED_SUCCESS
		{
			OrbitalFlight3_Count = $OrbitalFlight3_Count + 1
		}
	}

	// Vessel Name
	DATA
	{
		type = string
		craft = CrewedOrbitAdvanced_3crew
	}

	// ------------------------------------------------------------------------
	// Parameters
	// ------------------------------------------------------------------------	
	PARAMETER
	{
		name = VesselGroup
		type = VesselParameterGroup
		title = Crewed orbital
		define = @/craft
		dissassociateVesselsOnContractCompletion = true
	
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a new vessel
			hideChildren = true
		}

		PARAMETER
		{
			name = ThreeCrew
			type = HasCrew
			minCrew = 3
			maxCrew = 3
			title = Have at least 3 crewmembers on board
			hideChildren = true
		}

		PARAMETER
		{
			name = OrbitWrapper
			title = Stay in specified orbit for the duration
			type = All
			disableOnStateChange = true
			completeInSequence = true

			PARAMETER
			{
				name = Orbit
				type = Orbit
				minPeA = @/startPeA
				maxApA = @/startApA
				maxEccentricity = @/Eccentricity
				targetBody = HomeWorld()
			}
			
			PARAMETER
			{
				name = Duration
				type = Duration
				duration = @/Duration
				preWaitText = Reach specified orbit
				waitingText = Orbiting...
				completionText = Orbits completed, you may fire retros when ready.
			}
		}
	}

	// Return Home Safely
	PARAMETER
	{
		name = VesselParameterGroup
		type = VesselParameterGroup
		title = Return Home Safely
		vessel = @/craft

		PARAMETER
		{
			name = ReachState
			type = ReachState

			targetBody = HomeWorld()
			situation = LANDED
			situation = SPLASHED

			disableOnStateChange = false
		}
		completeInSequence = true
		disableOnStateChange = false
	}

	// Checking crew safety
	PARAMETER
	{
		name = All
		type = All
		title = safely

		PARAMETER
		{
			name = VesselNotDestroyed
			type = VesselNotDestroyed
			title = without destroying your aircraft

			vessel = @/craft
		}

		PARAMETER
		{
			name = KerbalDeaths
			type = KerbalDeaths
			title = or killing anyone

			vessel = @/craft
		}
		completeInSequence = true
		disableOnStateChange = true
	}
}